require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ParagraphsController do

# This should return the minimal set of attributes required to create a valid
# Paragraph. As you add validations to Paragraph, be sure to
# update the return value of this method accordingly.
  def valid_attributes
    {}
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ParagraphsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  def connect_paragraphs(paragraph_1, paragraph_2)
    paragraph_1.next = paragraph_2
    paragraph_2.prev = paragraph_1
    
    paragraph_1.save!
    paragraph_2.save!  
  end

  def create_2_connected_paragraphs
    first_paragraph = Paragraph.create! valid_attributes
    second_paragraph = Paragraph.create! valid_attributes
    
    connect_paragraphs(first_paragraph, second_paragraph)

    return first_paragraph, second_paragraph
  end

  def create_3_connected_paragraphs
    first_paragraph, second_paragraph = create_2_connected_paragraphs
    third_paragraph = Paragraph.create! valid_attributes
    
    connect_paragraphs(second_paragraph, third_paragraph)
    
    return first_paragraph, second_paragraph, third_paragraph
  end

  describe "GET index" do
    it "assigns all paragraphs as @paragraphs" do
      paragraph = Paragraph.create! valid_attributes
      get :index, {}, valid_session
      assigns(:paragraphs).should eq([paragraph])
    end
  end

  describe "GET show" do
    it "assigns the requested paragraph as @paragraph" do
      paragraph = Paragraph.create! valid_attributes
      get :show, {:id => paragraph.to_param}, valid_session
      assigns(:paragraph).should eq(paragraph)
    end
  end

  describe "GET new" do
    it "assigns a new paragraph as @paragraph" do
      get :new, {}, valid_session
      assigns(:paragraph).should be_a_new(Paragraph)
    end
  end

  describe "GET edit" do
    it "assigns the requested paragraph as @paragraph" do
      paragraph = Paragraph.create! valid_attributes
      get :edit, {:id => paragraph.to_param}, valid_session
      assigns(:paragraph).should eq(paragraph)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Paragraph" do
        expect {
          post :create, {:paragraph => valid_attributes}, valid_session
        }.to change(Paragraph, :count).by(1)
      end

      it "assigns a newly created paragraph as @paragraph" do
        post :create, {:paragraph => valid_attributes}, valid_session
        assigns(:paragraph).should be_a(Paragraph)
        assigns(:paragraph).should be_persisted
      end

      it "redirects to the created paragraph" do
        post :create, {:paragraph => valid_attributes}, valid_session
        response.should redirect_to(Paragraph.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved paragraph as @paragraph" do
      # Trigger the behavior that occurs when invalid params are submitted
        Paragraph.any_instance.stub(:save).and_return(false)
        post :create, {:paragraph => {}}, valid_session
        assigns(:paragraph).should be_a_new(Paragraph)
      end

      it "re-renders the 'new' template" do
      # Trigger the behavior that occurs when invalid params are submitted
        Paragraph.any_instance.stub(:save).and_return(false)
        post :create, {:paragraph => {}}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested paragraph" do
        paragraph = Paragraph.create! valid_attributes
        # Assuming there are no other paragraphs in the database, this
        # specifies that the Paragraph created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Paragraph.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, {:id => paragraph.to_param, :paragraph => {'these' => 'params'}}, valid_session
      end

      it "assigns the requested paragraph as @paragraph" do
        paragraph = Paragraph.create! valid_attributes
        put :update, {:id => paragraph.to_param, :paragraph => valid_attributes}, valid_session
        assigns(:paragraph).should eq(paragraph)
      end

      it "redirects to the paragraph" do
        paragraph = Paragraph.create! valid_attributes
        put :update, {:id => paragraph.to_param, :paragraph => valid_attributes}, valid_session
        response.should redirect_to(paragraph)
      end
    end

    describe "with invalid params" do
      it "assigns the paragraph as @paragraph" do
        paragraph = Paragraph.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Paragraph.any_instance.stub(:save).and_return(false)
        put :update, {:id => paragraph.to_param, :paragraph => {}}, valid_session
        assigns(:paragraph).should eq(paragraph)
      end

      it "re-renders the 'edit' template" do
        paragraph = Paragraph.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Paragraph.any_instance.stub(:save).and_return(false)
        put :update, {:id => paragraph.to_param, :paragraph => {}}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    describe "no connection to other paragraphs" do
      it "destroys the requested paragraph" do
        paragraph = Paragraph.create! valid_attributes
        expect {
          delete :destroy, {:id => paragraph.to_param}, valid_session
        }.to change(Paragraph, :count).by(-1)
      end
    end

    describe "2 connected paragraphs" do
      it "destroys the requested paragraph" do
        first_paragraph, second_paragraph = create_2_connected_paragraphs
        
        expect {
          delete :destroy, {:id => first_paragraph.to_param}, valid_session
        }.to change(Paragraph, :count).by(-1)
      end
      
      it "sets prev of second_paragraph to nil" do
        first_paragraph, second_paragraph = create_2_connected_paragraphs
        
        delete :destroy, {:id => first_paragraph.to_param}, valid_session
        
        modified_second_paragraph = Paragraph.find(second_paragraph.id)
        
        modified_second_paragraph.prev.should be_nil     
      end
      
      it "sets next of first_paragraph to nil" do
        first_paragraph, second_paragraph = create_2_connected_paragraphs
        
        delete :destroy, {:id => second_paragraph.to_param}, valid_session
        
        modified_first_paragraph = Paragraph.find(first_paragraph.id)
        
        modified_first_paragraph.next.should be_nil     
      end
    end 

    describe "3 connected paragraphs" do
      it "destroys the requested paragraph" do
        first_paragraph, second_paragraph, third_paragraph = create_3_connected_paragraphs
        
        expect {
          delete :destroy, {:id => second_paragraph.to_param}, valid_session
        }.to change(Paragraph, :count).by(-1)
      end
      
      it "sets prev of third_paragraph to first_paragraph" do
        first_paragraph, second_paragraph, third_paragraph = create_3_connected_paragraphs
        
        delete :destroy, {:id => second_paragraph.to_param}, valid_session
        
        modified_first_paragraph = Paragraph.find(first_paragraph.id)
        modified_third_paragraph = Paragraph.find(third_paragraph.id)

        modified_first_paragraph.id.should equal(modified_third_paragraph.prev.id) 
      end
      
      it "sets next of third_paragraph to first_paragraph" do
        first_paragraph, second_paragraph, third_paragraph = create_3_connected_paragraphs
        
        delete :destroy, {:id => second_paragraph.to_param}, valid_session
        
        modified_first_paragraph = Paragraph.find(first_paragraph.id)
        modified_third_paragraph = Paragraph.find(third_paragraph.id)

        modified_third_paragraph.id.should equal(modified_first_paragraph.next.id)
      end
    end 
    
    it "redirects to the paragraphs list" do
      paragraph = Paragraph.create! valid_attributes
      delete :destroy, {:id => paragraph.to_param}, valid_session
      response.should redirect_to(paragraphs_url)
    end
  end

end
